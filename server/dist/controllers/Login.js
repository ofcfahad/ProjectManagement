"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.verifyAOTP = exports.sendAOTP = exports.getUserEmail = exports.authenticateUser = void 0;
const User_1 = __importDefault(require("../database/Schemas/User"));
const bcryptjs_1 = __importDefault(require("bcryptjs"));
const nodemailer_1 = __importDefault(require("nodemailer"));
const randomstring_1 = __importDefault(require("randomstring"));
const jsonwebtoken_1 = __importDefault(require("jsonwebtoken"));
const authenticateUser = (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const { userName, userPassword } = req.body;
        console.log(`from authenticateUser: ${userName}, ${userPassword}`);
        const user = yield User_1.default.findOne({
            $or: [
                { userName: userName },
                { userEmail: userName },
            ],
        });
        if (user && (yield bcryptjs_1.default.compare(userPassword, user.userPassword))) {
            res.status(200).json({ message: 'success' });
        }
        else {
            res.json({ message: 'username or password incorrect' });
        }
    }
    catch (error) {
        console.log(`from authenticateUser: ${error}`);
    }
});
exports.authenticateUser = authenticateUser;
const getUserEmail = (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const { userName, userPassword } = req.body;
        const user = yield User_1.default.findOne({
            $or: [
                { userName: userName },
                { userEmail: userName },
            ],
        });
        if (user && (yield bcryptjs_1.default.compare(userPassword, user.userPassword))) {
            res.status(200).send(user.userEmail);
        }
        else
            res.status(404).send('some error');
    }
    catch (error) {
        console.log(`from getUserEmail: ${error}`);
    }
});
exports.getUserEmail = getUserEmail;
const savedOtps = {};
const sendAOTP = (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    const { userEmail } = req.body;
    const user = yield User_1.default.findOne({ userEmail: userEmail });
    if (!user) {
        return res.status(404).json({ message: 'it seems the Email you provided is not associated with your account' });
    }
    const otp = randomstring_1.default.generate({ length: 6, charset: 'numeric' });
    const otpExpirationTime = Date.now() + 1 * 60 * 1000;
    const { EMAIL, EMAIL_PASS } = process.env;
    savedOtps[userEmail] = {
        otp,
        otpExpirationTime,
    };
    // Configure Nodemailer transport
    const transporter = nodemailer_1.default.createTransport({
        service: 'gmail',
        auth: {
            user: EMAIL,
            pass: EMAIL_PASS,
        },
    });
    const mailOptions = {
        from: 'Project Management',
        to: userEmail,
        subject: 'OTP for email authentication',
        html: `Dear Recipient,
<br />
  We noticed that you requested a One-Time Password (OTP) code to access our system. 
<br /> 
  Here is your OTP <strong id="otp"> ${otp} </strong> 
<br /> 
  We want to remind you that for security reasons, OTP codes are valid only for <strong>${Number((otpExpirationTime - Date.now() + 1) / 1000)}</strong> seconds. After the expiration time, your OTP code will no longer be valid, and you will need to request a new one to access our system. 
<br /> 
  If you have not requested an OTP code, please ignore this email and contact our support team immediately. 
<br /> 
  Thank you for choosing our service. We value your security, and we want to ensure that your information is always protected. 
<br /> 
  Best regards,
<br />
 <strong> PJM </strong>
 <br />
 Generated by <strong> ChatGPT </strong>
 <script>
 var otp = document.getElementById('otp');
 
 otp.onclick = function() {
   navigator.clipboard.writeText(otp.innerText)
     .then(() => {
       alert('OTP copied to clipboard!');
     })
     .catch((error) => {
       console.error('Failed to copy OTP: ', error);
     });
 };
 </script>`,
    };
    transporter.sendMail(mailOptions, (error, info) => {
        if (error) {
            console.log(error);
            res.status(500).send('Error sending OTP');
        }
        else {
            console.log('Email sent: ' + info.response);
            res.status(200).send('Email Sent');
        }
    });
});
exports.sendAOTP = sendAOTP;
const getUserId = (userEmail, userPassword) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const user = yield User_1.default.findOne({ userEmail });
        console.log(`from getUserId: ${user}`);
        if (user && (yield bcryptjs_1.default.compare(userPassword, user.userPassword))) {
            return user._id;
        }
    }
    catch (error) {
        console.log(error);
    }
});
const verifyAOTP = (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    const { userEmail, userPassword, otp } = req.body;
    if (!savedOtps || savedOtps[userEmail].otp !== otp || Number(savedOtps[userEmail].otpExpirationTime) < Date.now()) {
        res.status(400).send('Expired or Invalid OTP');
    }
    else {
        const userId = yield getUserId(userEmail, userPassword);
        console.log(`from veifyAOTP:  ${userId}`);
        const secret = process.env.SECRET_KEY;
        const token = jsonwebtoken_1.default.sign({ userId }, secret, { expiresIn: '7d' });
        console.log(`from veifyAOTP:  ${token}`);
        res.status(200).json({ message: 'welcome aboard', token });
    }
});
exports.verifyAOTP = verifyAOTP;
//# sourceMappingURL=Login.js.map